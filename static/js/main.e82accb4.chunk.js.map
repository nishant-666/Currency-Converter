{"version":3,"sources":["CurrencyRow.js","header.js","divider.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","className","Input","placeholder","value","onChange","map","option","key","HeaderExampleSettingsIcon","Header","style","marginBottom","color","as","icon","Icon","name","Subheader","DividerExampleDivider","Divider","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","e","target","ReactDOM","render","document","getElementById"],"mappings":"uRAGe,SAASA,EAAYC,GAAQ,IAExCC,EAKED,EALFC,gBACAC,EAIEF,EAJFE,iBACAC,EAGEH,EAHFG,iBACAC,EAEEJ,EAFFI,eACAC,EACEL,EADFK,OAEF,OACE,yBAAKC,UAAU,YACb,kBAACC,EAAA,EAAD,CAAOC,YAAY,gCAAgCC,MAAOJ,EAAQK,SAAUN,IAE5E,4BAAQK,MAAOP,EAAkBQ,SAAUP,GACxCF,EAAgBU,KAAI,SAAAC,GAAM,OACzB,4BAAQC,IAAKD,EAAQH,MAAOG,GAASA,Q,qBCJhCE,EAVmB,kBAChC,kBAACC,EAAA,EAAD,CAAQC,MAAO,CAACC,aAAa,GAAGC,MAAM,SAAUC,GAAG,KAAKC,MAAI,GAC1D,kBAACC,EAAA,EAAD,CAAMC,KAAK,aADb,qBAGE,kBAACP,EAAA,EAAOQ,UAAR,CAAkBP,MAAO,CAACC,aAAa,GAAGC,MAAM,UAAhD,qC,SCFWM,EAFe,kBAAM,kBAACC,EAAA,EAAD,OCE9BC,EAAW,yCAuEFC,MArEf,WAAgB,IAQVC,EAAUC,EARD,EACiCC,mBAAS,IAD1C,mBACN7B,EADM,KACW8B,EADX,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAI2BL,qBAJ3B,mBAINM,EAJM,KAIQC,EAJR,OAKeP,mBAAS,GALxB,mBAKNzB,EALM,KAKEiC,EALF,OAM2CR,oBAAS,GANpD,mBAMNS,EANM,KAMgBC,EANhB,KA+Cb,OAtCID,GACFV,EAAaxB,EACbuB,EAAWvB,EAAS+B,IAEpBR,EAAWvB,EACXwB,EAAaxB,EAAS+B,GAGxBK,qBAAU,WACRC,MAAMhB,GACHiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAE9B,IAEHN,qBAAU,WACY,MAAhBT,GAAsC,MAAdE,GAC1BQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IAC/CS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAE5C,CAACF,EAAcE,IAahB,yBAAK5B,UAAU,aACb,kBAAC,EAAD,MACA,kBAACP,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkB8B,EAClB7B,iBAAkB,SAAAiD,GAAC,OAAInB,EAAgBmB,EAAEC,OAAO5C,QAChDL,eAjBN,SAAgCgD,GAC9Bd,EAAUc,EAAEC,OAAO5C,OACnB+B,GAAwB,IAgBpBnC,OAAQwB,IAEX,kBAAC,EAAD,MACC,kBAAC9B,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBgC,EAClB/B,iBAAkB,SAAAiD,GAAC,OAAIjB,EAAciB,EAAEC,OAAO5C,QAC9CL,eApBN,SAA8BgD,GAC5Bd,EAAUc,EAAEC,OAAO5C,OACnB+B,GAAwB,IAmBpBnC,OAAQuB,MClEhB0B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e82accb4.chunk.js","sourcesContent":["import React from 'react'\nimport { Input } from 'semantic-ui-react'\n\nexport default function CurrencyRow(props) {\n  const {\n    currencyOptions,\n    selectedCurrency,\n    onChangeCurrency,\n    onChangeAmount,\n    amount\n  } = props\n  return (\n    <div className=\"currency\">\n      <Input placeholder='Enter the Currency to Convert' value={amount} onChange={onChangeAmount} />\n      \n      <select value={selectedCurrency} onChange={onChangeCurrency}>\n        {currencyOptions.map(option => (\n          <option key={option} value={option}>{option}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n","import React from 'react'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\nconst HeaderExampleSettingsIcon = () => (\r\n  <Header style={{marginBottom:20,color:\"white\"}} as='h1' icon>\r\n    <Icon name='currency' />\r\n    Currency Converter\r\n    <Header.Subheader style={{marginBottom:10,color:\"white\"}}>\r\n      Convert your currency for free!\r\n    </Header.Subheader>\r\n  </Header>\r\n)\r\n\r\nexport default HeaderExampleSettingsIcon\r\n","import React from 'react'\r\nimport { Divider } from 'semantic-ui-react'\r\n\r\nconst DividerExampleDivider = () => <Divider  />\r\n\r\nexport default DividerExampleDivider\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CurrencyRow from './CurrencyRow'\nimport Header from './header'\nimport  Divider  from './divider';\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [fromCurrency, setFromCurrency] = useState()\n  const [toCurrency, setToCurrency] = useState()\n  const [exchangeRate, setExchangeRate] = useState()\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[0]\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n     <Divider/>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}